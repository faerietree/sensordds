package edu.umb.cs.tinydds.cl;

/* Generated By:JavaCC: Do not edit this line. DDSParser.java */
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.Hashtable;
import java.util.Enumeration;

/**
 *
 * 
 *
 * @author matt calder
 */
public class DDSParser implements DDSParserConstants {

        private static Hashtable selectors = new Hashtable();

        public DDSParser(String s){
                this(new InputStreamReader(new ByteArrayInputStream(s.getBytes())));

                selectors.put("Temporal", "max"); //default selection is most recent measurement
        }

        public static void main(String[] args){

                try {
                        String query = args[0];

                        DDSParser parser = new DDSParser(query);
                        Expression exp = parser.parse();

                        //check that we picked up the selectors
                        Hashtable selectors = parser.getSelectors();
                        for(Enumeration keys = selectors.keys(); keys.hasMoreElements() ;){
                                Object element = keys.nextElement();
                                System.out.println(element+" with "+selectors.get(element));
                        }

                        //build the table of variables
                        Hashtable vars = new Hashtable();
                        vars.put("Phenom", "5.0");
                        vars.put("Temporal", ""+System.currentTimeMillis());


                        boolean result = exp.eval(vars);
                        System.out.println("result: "+result);
                }
                catch(Exception e){
                        e.printStackTrace();
                }
        }

        public interface Expression {
               public boolean eval(Hashtable vars);
        }

        public static Hashtable getSelectors(){
                return selectors;
        }

        static class AndOrExpression implements Expression {

               private Expression lhs;
               private Expression rhs;
               private String operator;

               public AndOrExpression(Expression lhs, Expression rhs, String operator){
                      this.lhs = lhs;
                      this.rhs = rhs;
                      this.operator = operator;
               }

               public boolean eval(Hashtable vars){

                      if(operator.equals("&&")){
                           return lhs.eval(vars) && rhs.eval(vars);
                      }
                      else {
                           return lhs.eval(vars) || rhs.eval(vars);
                      }
               }
        }

        static class RelationalExpression implements Expression {

                private String lhs;
                private String rhs;
                private String operator;
                private boolean lhsIsVar;

                public RelationalExpression(String lhs, String rhs, String operator, boolean lhsIsVar){
                        this.lhs = lhs;
                        this.rhs = rhs;
                        this.operator = operator;
                        this.lhsIsVar = lhsIsVar;
                }

                public boolean eval(Hashtable vars){

                        double lhsValue;
                        double rhsValue;

                        if(lhsIsVar){
                            String lhsValueString = (String)vars.get(lhs);
                            lhsValue = Double.parseDouble(lhsValueString);
                            rhsValue = Double.parseDouble(rhs);
                        }
                        else {
                            String rhsValueString = (String)vars.get(rhs);
                            rhsValue = Double.parseDouble(rhsValueString);
                            lhsValue = Double.parseDouble(lhs);
                        }


                        if(operator.equals(">")){
                                return lhsValue > rhsValue;
                        }
                        else if(operator.equals("<")){
                                return lhsValue < rhsValue;
                        }
                        else if(operator.equals("=")){
                                return lhsValue == rhsValue;
                        }
                        else if(operator.equals("<>")){
                                return lhsValue != rhsValue;
                        }
                        else
                                return false;

                }
        }

  static final public Expression parse() throws ParseException {
        Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      exp = selectors();
      break;
    case PHENOM:
    case TEMPORAL:
    case LPAREN:
    case NATURALNUM:
    case REALNUM:
      exp = expression();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression selectors() throws ParseException {
        Expression exp = null;
        Token function, _type;
    function = jj_consume_token(ATOM);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PHENOM:
      _type = jj_consume_token(PHENOM);
      break;
    case TEMPORAL:
      _type = jj_consume_token(TEMPORAL);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
            selectors.put(_type.image, function.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      exp = expression();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression expression() throws ParseException {
        Expression lhs = null, rhs = null;
    lhs = condition();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        rhs = condition();
                                      lhs = new AndOrExpression(lhs, rhs, "&&");
        break;
      case OR:
        jj_consume_token(OR);
        rhs = condition();
                                     lhs = new AndOrExpression(lhs, rhs, "||");
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression condition() throws ParseException {
        Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PHENOM:
    case TEMPORAL:
    case NATURALNUM:
    case REALNUM:
      exp = typeExpression();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression typeExpression() throws ParseException {
        Token tOp, tNum, tType;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PHENOM:
      jj_consume_token(PHENOM);
      tOp = relationalOp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REALNUM:
        tNum = jj_consume_token(REALNUM);
        break;
      case NATURALNUM:
        tNum = jj_consume_token(NATURALNUM);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return new RelationalExpression("Phenom", tNum.image, tOp.image, true);}
      break;
    case TEMPORAL:
      jj_consume_token(TEMPORAL);
      tOp = relationalOp();
      tNum = jj_consume_token(NATURALNUM);
          {if (true) return new RelationalExpression("Temporal", tNum.image, tOp.image, true);}
      break;
    case REALNUM:
      tNum = jj_consume_token(REALNUM);
      tOp = relationalOp();
      jj_consume_token(TEMPORAL);
          {if (true) return new RelationalExpression(tNum.image, "Temporal", tOp.image, false);}
      break;
    case NATURALNUM:
      tNum = jj_consume_token(NATURALNUM);
      tOp = relationalOp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHENOM:
        tType = jj_consume_token(PHENOM);
        break;
      case TEMPORAL:
        tType = jj_consume_token(TEMPORAL);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return new RelationalExpression(tNum.image, tType.image, tOp.image, false);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token temporalOp() throws ParseException {
        Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEFORE:
      tOp = jj_consume_token(BEFORE);
      break;
    case AFTER:
      tOp = jj_consume_token(AFTER);
      break;
    case BETWEEN:
      tOp = jj_consume_token(BETWEEN);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tOp;}
    throw new Error("Missing return statement in function");
  }

  static final public Token relationalOp() throws ParseException {
        Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      tOp = jj_consume_token(EQUALS);
      break;
    case LT:
      tOp = jj_consume_token(LT);
      break;
    case GT:
      tOp = jj_consume_token(GT);
      break;
    case NOTEQUAL:
      tOp = jj_consume_token(NOTEQUAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tOp;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public DDSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x581060,0x60,0x40000,0xc00,0xc00,0x181060,0x180000,0x60,0x180060,0x380,0x3c000,};
   }

  public DDSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public DDSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source = new DDSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public DDSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DDSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public DDSParser(DDSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(DDSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    for (int i = 0; i < 23; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
